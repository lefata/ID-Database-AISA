export enum PersonCategory {
  STAFF = 'Staff',
  STUDENT = 'Student',
  PARENT = 'Parent/Guardian',
}

export interface Person {
  id: number;
  category: PersonCategory;
  firstName: string;
  lastName: string;
  image: string; // Base64 encoded image or URL
  role?: string; // For Staff
  class?: string; // For Students
  guardianIds?: number[]; // For Students
  guardianDetails?: Associate[]; // For displaying guardian names
  bio: string; // Generated by Gemini
  googleSheetId: string; // Simulated lookup
}

export interface Settings {
  [key: string]: string;
}

// A lightweight type for populating guardian/staff names
export interface Associate {
  id: number;
  firstName: string;
  lastName: string;
  image: string;
}

// Data shape for creating a new person, before it has a database ID or generated bio.
export type NewPersonData = Omit<Person, 'id' | 'bio' | 'googleSheetId' | 'guardianDetails'> & { tempId: string, guardianTempIds?: string[] };

export interface PendingUser {
    id: string;
    email: string;
    created_at: string;
}

export type UserRole = 'admin' | 'user' | 'security';

export interface ManagedUser {
    id: string;
    email: string;
    role: UserRole;
}

export interface PersonAccessLog {
    id: number;
    created_at: string;
    direction: 'entry' | 'exit';
    location: string;
    recorder: {
        email: string;
    };
}

export interface AccessLog {
    id: number;
    created_at: string;
    direction: 'entry' | 'exit';
    location: string;
    person: {
        firstName: string;
        lastName: string;
        image: string;
    };
    recorder: {
        email: string;
    };
}

export interface AnalyticsData {
    on_campus: number;
    entries_today: number;
    exits_today: number;
}