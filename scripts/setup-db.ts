import { supabase } from './lib/supabaseClient';
import 'dotenv/config';

// SQL command to create the 'people' table.
const CREATE_TABLE_SQL = `
CREATE TABLE public.people (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  category VARCHAR(20) NOT NULL,
  "firstName" VARCHAR(50) NOT NULL,
  "lastName" VARCHAR(50) NOT NULL,
  image TEXT NOT NULL,
  role VARCHAR(50),
  class VARCHAR(50),
  "guardianIds" BIGINT[],
  bio TEXT NOT NULL,
  "googleSheetId" VARCHAR(20) NOT NULL,
  "createdAt" TIMESTAMPTZ DEFAULT NOW() NOT NULL
);
`.trim();

async function setupDatabase() {
  console.log('üöÄ Starting Supabase database setup...');

  try {
    // 1. Check if the 'people' table exists.
    console.log('‚ÑπÔ∏è Checking for "people" table...');
    const { error: tableCheckError } = await supabase.from('people').select('id').limit(1);

    if (tableCheckError && tableCheckError.code === 'PGRST205') { // 'PGRST205' means table not found
      console.error('‚ùå ERROR: The "people" table was not found in your database.');
      console.log('---------------------------------------------------------------------------------');
      console.log('Please create the table by running the following SQL in your Supabase SQL Editor:');
      console.log('\n' + CREATE_TABLE_SQL + '\n');
      console.log('After creating the table, please re-run this script: `npm run db:setup`');
      console.log('---------------------------------------------------------------------------------');
      (process as any).exit(1);
    } else if (tableCheckError) {
      // For any other unexpected errors during the check, throw them.
      throw new Error(`Failed to check for "people" table: ${tableCheckError.message}`);
    }
    console.log('‚úÖ "people" table found.');


    // 2. Check if table is empty before seeding
    const { count, error: countError } = await supabase.from('people').select('*', { count: 'exact', head: true });
    
    if (countError) throw countError;

    if (count !== null && count > 0) {
        console.log('‚úÖ Database already contains data. Skipping seed process.');
        console.log('‚ú® Database setup complete! You can now run `npm run dev` to start the application.');
        return;
    }
    
    // 3. Seed the database
    console.log('üå± Seeding database with initial data...');
    
    // Insert Staff
    await supabase.from('people').insert({
        category: 'Staff',
        firstName: 'Eleanor',
        lastName: 'Vance',
        role: 'Principal',
        image: 'https://picsum.photos/seed/eleanor/200/200',
        bio: 'A visionary leader dedicated to fostering an inspiring learning environment.',
        googleSheetId: 'GS-83610'
    });

    // Insert Parents and get their new IDs
    const { data: marcusData, error: marcusError } = await supabase.from('people').insert({
        category: 'Parent/Guardian',
        firstName: 'Marcus',
        lastName: 'Cole',
        role: 'Parent/Guardian',
        image: 'https://picsum.photos/seed/marcus/200/200',
        bio: 'An engaged parent committed to supporting the school community.',
        googleSheetId: 'GS-19283'
    }).select('id').single();

    const { data: oliviaData, error: oliviaError } = await supabase.from('people').insert({
        category: 'Parent/Guardian',
        firstName: 'Olivia',
        lastName: 'Chen',
        role: 'Parent/Guardian',
        image: 'https://picsum.photos/seed/olivia/200/200',
        bio: 'A creative and supportive presence in our community.',
        googleSheetId: 'GS-55431'
    }).select('id').single();

    if (marcusError || oliviaError) {
        throw new Error(`Failed to insert parents: ${marcusError?.message || oliviaError?.message}`);
    }

    const marcusId = marcusData.id;
    const oliviaId = oliviaData.id;

    // Insert Student with guardian IDs
    await supabase.from('people').insert({
        category: 'Student',
        firstName: 'Leo',
        lastName: 'Cole',
        class: 'Grade 5',
        image: 'https://picsum.photos/seed/leo/200/200',
        bio: 'A curious and bright student with a passion for science.',
        googleSheetId: 'GS-48265',
        guardianIds: [marcusId, oliviaId]
    });


    console.log('‚úÖ Initial data seeded successfully.');
    console.log('‚ú® Database setup complete! You can now run `npm run dev` to start the application.');

  } catch (error) {
    console.error('‚ùå An error occurred during database setup:', error);
    console.error('Please ensure your Supabase project is running and the environment variables in your .env file are correct.');
    // FIX: Cast process to any to bypass TypeScript error for process.exit.
    // This is necessary when Node.js types are not properly configured for the script environment.
    (process as any).exit(1);
  }
}

setupDatabase();